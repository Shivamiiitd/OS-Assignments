Here we have three .c files namely Ques1, E1 and E2. Ques1 is the main file and E1 and E2 are invoked from Ques1 by SR and ST respectively.
First of all, in Ques1, we created the child process S1 by forking. Then in the parent process of S1 we created two more child processes SR
and ST similarly by forking. Now we register a signal handler for SIGTERM signal in S1. Whenever SIGTERM of S1 will be called, we have used
sigaction() system call so that sigterm handler function gets called. In SR and ST we passed the process ID (pid) of S1 as the argument in 
the exec() system call and by the use of execvp() system call we jumped to E1 and E2 respectively. 

Now in E1, we generated a random number from CPU by the RDRAND instruction. We have registered a signal handler function for the SIGALRM signal
in E1. SIGALRM signal is raised by a timer defined in the main function of E1 by the setitimer() system call. Whenever the timer came, SIGALRM 
is called, which then calls the signal handler function of SIGALRM and in that handler function, the handler function of SIGTERM of S1 is called
by the sigqueue() system call. In sigqueue() system call, we pass the process id of S1 (pid) which was given as the argumnent in execvp(), signal 
number (SIGTERM) and the random number generated by RDRAND is passed as the parameter. The sigterm handler function of S1, finally prints that 
Random number on the terminal. 

Now in E2, we got the number of clock ticks elapsed since the last report by the RDTSC instruction. In this we have registered two signal handler, 
one for SIGTERM signal and other for SIGALRM signal. SIGALRM signal as similar to E1 is raised by the timer defined in the main function by the 
setitimer() system call. Whenever the timer came, SIGALRM is called, which then calls the sigalrm handler function. Now the sigalrm handler function 
generates the random number(clock ticks) by RDTSC instruction and then it calls the SIGTERM signal by the kill() system call. Kill system call has 
two arguments, one is the process id to which the signal have to be sent and the other is the signal number itself (SIGTERM here). Now in the sigterm 
handler of E2, the clock ticks we got by the RDTSC instruction are divided by the base clock CPU frequency. CPU frequency can be determined by running 
the command: 
			“cat /proc/cpuinfo | grep MHz”
on your linux machine. After division of clock ticks by the CPU frequency, we get the number of seconds elapsed. Then we convert those seconds into 
hours, minutes and left seconds. Finally, we print the time elapsed in hours, minutes and seconds in the signal handler function.
I have also done various Error handling in the code, if the program fails to fork, if sigqueue, sigaction, setitimer etc. fails, then code will 
return error.

To run the three programs via Makefile:-
First run the command “make sr” on the terminal
After this run the command “make st” on the terminal
And then run the command “make q1” on the terminal.
And finally run the command “./q1” on the terminal.
Only after all these commands, all three programs will execute successfully.
(Makefile is attached)
